{"version":3,"sources":["serviceWorker.js","components/CreateTableApp/ColumnContainer.jsx","components/CreateTableApp/CreateTableApp.jsx","components/Header.jsx","components/Footer.jsx","components/ViewDataApp/TableDataContainer.jsx","components/ViewDataApp/ViewDataApp.jsx","components/AddDataApp/AddDataContainer.jsx","components/AddDataApp/AddDataApp.jsx","components/TableNameContainer.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","ColumnContainer","state","tableName","attributes","name","type","maxSize","createTableURL","resetState","setState","handleCreate","data","postData","then","props","parentSetLastCreatedTable","parentSetClickedTable","parentSetClickedApp","handleChange","idx","e","target","value","handleChangeOnTableName","handleAddRow","handleRemoveRow","slice","handleRemoveSpecificRow","splice","url","options","method","headers","body","JSON","stringify","fetch","response","className","id","this","onChange","class","map","item","key","onClick","Component","CreateTableApp","Header","data-toggle","data-target","aria-controls","aria-expanded","aria-label","href","placeholder","disabled","Footer","TableDataContainer","tableAttributes","errors","tableDataURL","tableAttributesURL","parseIncomingData","receivedTableData","Object","keys","count","length","index","element","forEach","attribute","push","renderTableDataRow","renderTableData","console","log","fetchAndUpdateTableAttributes","fetchAndUpdateTableData","prevProps","json","receivedTableAttributes","catch","error","localErrors","getDerivedStateFromProps","ViewDataApp","currentTableName","renderTableDataContainer","Fragment","AddDataContainer","addDataURL","getAttributesURL","loading","parseIntoSushisJsonFormat","resultData","handleSubmit","receivedData","renderInputRow","renderInputRows","AddDataApp","TableNameContainer","tableNames","activeTableName","lastCreatedTable","getTableNamesURL","renderTableContent","table","parentGetClickedTable","fetchAndUpdateTableNames","errorRegexp","responseArray","test","receivedTableNames","isValidResponse","stateErrors","App","undefined","currentApp","clickedApp","renderApp","currentTable","d","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97af95fc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport \"../../App.css\";\n\nclass ColumnContainer extends Component {\n  state = {\n    tableName: \"\",\n    attributes: [\n      {\n        name: \"\",\n        type: \"\",\n        maxSize: \"\"\n      }\n    ]\n  };\n  createTableURL = \"https://data-exchange-api.herokuapp.com/api/table\";\n\n  resetState = () => {\n    this.setState({\n      tableName: \"\",\n      attributes: [\n        {\n          name: \"\",\n          type: \"\",\n          maxSize: \"\"\n        }\n      ]\n    });\n  };\n\n  handleCreate = () => {\n    const tableName = this.state.tableName;\n    const data = this.state;\n    this.resetState();\n    this.postData(this.createTableURL, data).then(data => {\n      //TODO: Let user know that the table was created and reset the table\n      this.props.parentSetLastCreatedTable(tableName);\n      this.props.parentSetClickedTable(tableName);\n      this.props.parentSetClickedApp(\"ViewDataApp\");\n    });\n  };\n\n  async postData(url, data) {\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    };\n    const response = await fetch(url, options);\n    return await response;\n  }\n\n  handleChange = idx => e => {\n    const { name, value } = e.target;\n    const attributes = [...this.state.attributes];\n    attributes[idx][name] = value;\n    this.setState({\n      attributes\n    });\n  };\n\n  handleChangeOnTableName = e => {\n    const { value } = e.target;\n    this.setState({\n      tableName: value\n    });\n  };\n\n  handleAddRow = () => {\n    const item = {\n      name: \"\",\n      type: \"\",\n      maxSize: \"\"\n    };\n    this.setState({\n      attributes: [...this.state.attributes, item]\n    });\n  };\n\n  handleRemoveRow = () => {\n    this.setState({\n      attributes: this.state.attributes.slice(0, -1)\n    });\n  };\n  handleRemoveSpecificRow = idx => () => {\n    const attributes = [...this.state.attributes];\n    attributes.splice(idx, 1);\n    this.setState({ attributes });\n  };\n\n  render() {\n    return (\n      <div className=\"container col-8 float-center mt-4\">\n        <div className=\"form-group row m-3\">\n          <span className=\"h3\">Table Name:</span>\n\n          <div className=\"col-sm-3\">\n            <input\n              id=\"tableName01\"\n              type=\"text\"\n              name=\"tableName\"\n              value={this.state.tableName}\n              onChange={this.handleChangeOnTableName}\n              className=\"form-control\"\n            />\n          </div>\n        </div>\n        <div class=\"table-wrap pr-2 mb-2\">\n          <table\n            className=\"table table-bordered table-striped table-hover m-2\"\n            id=\"tab_logic\"\n          >\n            <thead>\n              <tr>\n                <th className=\"text-center\"> Column Name </th>\n                <th className=\"text-center\"> Column Type </th>\n                <th className=\"text-center\"> Max Size</th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.attributes.map((item, idx) => (\n                <tr id=\"addr0\" key={idx}>\n                  <td>\n                    <input\n                      type=\"text\"\n                      name=\"name\"\n                      value={this.state.attributes[idx].name}\n                      onChange={this.handleChange(idx)}\n                      className=\"form-control\"\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      name=\"type\"\n                      value={this.state.attributes[idx].type}\n                      onChange={this.handleChange(idx)}\n                      className=\"form-control\"\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      name=\"maxSize\"\n                      value={this.state.attributes[idx].maxSize}\n                      onChange={this.handleChange(idx)}\n                      className=\"form-control\"\n                    />\n                  </td>\n                  <td className=\"text-center\">\n                    <button\n                      className=\"btn btn-outline-danger btn-sm font-weight-bold\"\n                      onClick={this.handleRemoveSpecificRow(idx)}\n                    >\n                      X\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <div className=\"float-left\">\n          <button\n            onClick={this.handleAddRow}\n            className=\"btn btn-outline-primary m-2\"\n          >\n            Add\n          </button>\n          <button\n            onClick={this.handleRemoveRow}\n            className=\"btn btn-outline-danger m-2\"\n          >\n            Remove\n          </button>\n        </div>\n        <button\n          onClick={this.handleCreate}\n          className=\"btn btn-outline-success m-2 float-right font-weight-bold\"\n        >\n          Create Table\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default ColumnContainer;\n","import React, { Component } from \"react\";\nimport ColumnContainer from \"./ColumnContainer\";\n\nclass CreateTableApp extends Component {\n  state = {};\n  render() {\n    return (\n      <ColumnContainer\n        parentSetClickedApp={this.props.parentSetClickedApp}\n        parentSetClickedTable={this.props.parentSetClickedTable}\n        parentSetLastCreatedTable={this.props.parentSetLastCreatedTable}\n      />\n    );\n  }\n}\n\nexport default CreateTableApp;\n","import React, { Component } from \"react\";\n\nclass Header extends Component {\n  state = {};\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light mb-2\">\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarTogglerDemo01\"\n          aria-controls=\"navbarTogglerDemo01\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\n          <a className=\"navbar-brand\" href=\"#Top\">\n            <span className=\"text-primary ml-3\">DATA</span>Exchange\n          </a>\n          <div className=\"navbar-nav mr-auto mt-2 mt-lg-0\"></div>\n          {/* <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"#Top\">\n                Tables <span className=\"sr-only\">(current)</span>\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#Top\">\n                Create Table <span className=\"sr-only\">(current)</span>\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#Top\">\n                Add Data <span className=\"sr-only\">(current)</span>\n              </a>\n            </li>\n          </ul> */}\n          <form className=\"form-inline my-2 my-lg-0\">\n            <input\n              className=\"form-control mr-sm-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            ></input>\n            <button\n              className=\"btn btn-outline-primary my-2 my-sm-0\"\n              type=\"submit\"\n              disabled\n            >\n              Search\n            </button>\n          </form>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer className=\"page-footer font-small fixed-bottom\">\n        <div className=\"footer-copyright text-center py-3\">\n          © 2020 Copyright:\n          <a href=\"https://mff.cuni.cz/\">Guatemala beans</a>\n        </div>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component, useEffect } from \"react\";\nimport \"../../App.css\";\n\nclass TableDataContainer extends Component {\n  state = {\n    tableName: this.props.tableName,\n    tableAttributes: [],\n    data: [],\n    errors: []\n    //whole table content for now (later implementation should not load the whole table)\n  };\n\n  tableDataURL = \"https://data-exchange-api.herokuapp.com/api/table/data/\";\n  tableAttributesURL =\n    \"https://data-exchange-api.herokuapp.com/api/table/columns/\";\n\n  componentDidMount() {\n    console.log(\"component \", this.state.tableName, \" mounted!\");\n    this.setState({ tableName: this.props.tableName });\n    this.fetchAndUpdateTableAttributes();\n    this.fetchAndUpdateTableData();\n    //fetch data from api\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.tableName !== prevProps.tableName) {\n      console.log(\n        \"props compare on update: \",\n        this.props.tableName,\n        prevProps.tableName\n      );\n      this.fetchAndUpdateTableAttributes();\n      this.fetchAndUpdateTableData();\n    }\n  }\n\n  fetchAndUpdateTableAttributes() {\n    const data = this.state.tableName;\n    const options = {\n      method: \"GET\"\n      // headers: {\n      //   \"Content-Type\": \"application/json\"\n      // },\n      // body: JSON.stringify(data)\n    };\n    fetch(this.tableAttributesURL + this.state.tableName, options)\n      .then(response => response.json())\n      .then(receivedTableAttributes =>\n        this.setState({ tableAttributes: receivedTableAttributes })\n      )\n      .catch(error => {\n        console.log(\"when fetching attributes\", error);\n        const localErrors = this.state.errors;\n        this.setState({\n          tableAttributes: [],\n          data: [],\n          errors: [...localErrors, error]\n        });\n      });\n  }\n\n  fetchAndUpdateTableData() {\n    const data = this.state.tableName;\n    const options = {\n      method: \"GET\"\n      // headers: {\n      //   \"Content-Type\": \"application/json\"\n      // },\n      // body: JSON.stringify(data)\n    };\n    fetch(this.tableDataURL + this.state.tableName, options)\n      .then(response => response.json())\n      .then(receivedTableData =>\n        this.setState({ data: this.parseIncomingData(receivedTableData) })\n      )\n      .catch(error => {\n        console.log(\"when fetching attributes\", error);\n        const localErrors = this.state.errors;\n        this.setState({\n          tableAttributes: [],\n          data: [],\n          errors: [...localErrors, error]\n        });\n      });\n  }\n\n  parseIncomingData = receivedTableData => {\n    //use this.state.attributes later!\n    const attributes = Object.keys(receivedTableData);\n    const count = [...receivedTableData[attributes[0]]].length; //fucking hack! CLEAN THAT SHIT UP\n    let data = [];\n    for (let index = 0; index < count; index++) {\n      let element = {};\n      attributes.forEach(attribute => {\n        element[attribute] = receivedTableData[attribute][index];\n      });\n      data.push(element);\n    }\n    return data;\n  };\n\n  renderTableDataRow = idx => {\n    return this.state.tableAttributes.map(attribute => (\n      <td>\n        <span className=\"\">{this.state.data[idx][attribute]}</span>\n      </td>\n    ));\n  };\n\n  renderTableData = () => {\n    return (\n      <tbody>\n        {this.state.data.map((item, idx) => (\n          <tr id=\"addr0\" key={idx}>\n            {this.renderTableDataRow(idx)}\n          </tr>\n        ))}\n      </tbody>\n    );\n  };\n\n  static getDerivedStateFromProps = (props, state) => {\n    state.tableName = props.tableName;\n    return state;\n  };\n\n  render() {\n    return (\n      <div className=\"container col-8 float-center mt-4\">\n        <span className=\"h3 m-3 text-capitalize\">{this.props.tableName}</span>\n        <div class=\"table-wrap pr-2 mb-2\">\n          <table\n            className=\"table table-bordered table-striped table-hover m-2\"\n            id=\"tab_logic\"\n          >\n            <thead>\n              <tr>\n                {this.state.tableAttributes.map(attribute => (\n                  <th className=\"text-capitalize\">{attribute}</th>\n                ))}\n              </tr>\n            </thead>\n            {this.renderTableData()}\n            {/* //rendering table body */}\n          </table>\n        </div>\n        <div className=\"float-right\">\n          <button\n            onClick={() => this.props.parentSetClickedApp(\"AddDataApp\")}\n            className=\"btn btn-outline-success m-2 font-weight-bold\"\n          >\n            Add Data\n          </button>\n          {/* <button className=\"btn btn-outline-warning m-2\" disabled>\n            Edit\n          </button>\n          <button className=\"btn btn-outline-danger m-2\" disabled>\n            Delete\n          </button> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TableDataContainer;\n","import React, { Component } from \"react\";\nimport TableDataContainer from \"./TableDataContainer\";\n\nclass ViewDataApp extends Component {\n  state = {\n    currentTableName: this.props.tableName\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    state.currentTableName = props.tableName;\n    return state;\n  }\n\n  renderTableDataContainer = () => {\n    if (this.state.currentTableName) {\n      return (\n        <TableDataContainer\n          tableName={this.state.currentTableName}\n          parentSetClickedApp={this.props.parentSetClickedApp}\n        />\n      );\n    }\n    return <span>No table selected...</span>;\n  };\n\n  render() {\n    return <React.Fragment>{this.renderTableDataContainer()}</React.Fragment>;\n  }\n}\n\nexport default ViewDataApp;\n","import React, { Component } from \"react\";\nimport \"../../App.css\";\n\nclass AddDataContainer extends Component {\n  state = {\n    tableName: this.props.tableName,\n    //readonly\n    attributes: [],\n    //readonly\n    data: [],\n    errors: []\n  };\n\n  addDataURL = \"https://data-exchange-api.herokuapp.com/api/table/data/\";\n  getAttributesURL =\n    \"https://data-exchange-api.herokuapp.com/api/table/columns/\";\n  loading = true;\n\n  static getDerivedStateFromProps(props, state) {\n    state.tableName = props.tableName;\n    //refresh attributes\n    return state;\n  }\n\n  fetchAndUpdateTableAttributes() {\n    const data = this.state.tableName;\n    const options = {\n      method: \"GET\"\n      // headers: {\n      //   \"Content-Type\": \"application/json\"\n      // },\n      // body: JSON.stringify(data)\n    };\n    fetch(this.getAttributesURL + this.state.tableName, options)\n      .then(response => response.json())\n      .then(receivedTableAttributes =>\n        this.setState({ attributes: receivedTableAttributes })\n      )\n      .catch(error => {\n        console.log(\"when fetching attributes\", error);\n        const localErrors = this.state.errors;\n        this.setState({\n          attributes: [],\n          data: [],\n          errors: [...localErrors, error]\n        });\n      });\n  }\n\n  //called when component initialized/mounted to DOM tree\n  componentDidMount() {\n    console.log(\"component mounted\");\n    //fetch table attributes from api\n    this.fetchAndUpdateTableAttributes();\n    this.handleAddRow();\n  }\n\n  resetState = () => {\n    this.setState({\n      data: []\n    });\n  };\n\n  parseIntoSushisJsonFormat = data => {\n    //best format ever\n    const dataCount = data.length;\n    if (dataCount == 0) {\n      return [];\n    }\n    const attributes = Object.keys(data[0]);\n    console.log(attributes);\n    let resultData = {};\n    attributes.forEach(attribute => {\n      resultData[attribute] = [];\n      data.forEach(data => {\n        resultData[attribute].push(data[attribute]);\n      });\n    });\n    console.log(resultData);\n    return resultData;\n  };\n\n  handleSubmit = () => {\n    const data = this.parseIntoSushisJsonFormat(this.state.data);\n    this.resetState();\n    this.postData(this.addDataURL + this.state.tableName, data).then(\n      receivedData => {\n        console.log(receivedData);\n        this.props.parentSetClickedApp(\"ViewDataApp\");\n      }\n    );\n  };\n\n  async postData(url, data) {\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    };\n\n    console.log(options);\n\n    const response = await fetch(url, options);\n    return await response;\n  }\n\n  handleChange = idx => e => {\n    const { name, value } = e.target;\n    const data = [...this.state.data];\n    data[idx][name] = value;\n    this.setState({\n      data\n    });\n  };\n\n  handleChangeOnTableName = e => {\n    const { value } = e.target;\n    this.setState({\n      tableName: value\n    });\n  };\n\n  handleAddRow = () => {\n    const item = {};\n    for (let index = 0; index < this.state.attributes.length; index++) {\n      item[this.state.attributes[index]] = \"\";\n    }\n    this.setState({\n      data: [...this.state.data, item]\n    });\n  };\n\n  handleRemoveRow = () => {\n    this.setState({\n      data: this.state.data.slice(0, -1)\n    });\n  };\n\n  handleRemoveSpecificRow = idx => () => {\n    const data = [...this.state.data];\n    data.splice(idx, 1);\n    this.setState({ data });\n  };\n\n  renderInputRow = idx => {\n    return this.state.attributes.map(attribute => (\n      <td>\n        <input\n          type=\"text\"\n          name={attribute}\n          value={this.state.data[idx][attribute]}\n          onChange={this.handleChange(idx)}\n          className=\"form-control\"\n        />\n      </td>\n    ));\n  };\n\n  renderInputRows = () => {\n    return (\n      <tbody>\n        {this.state.data.map((item, idx) => (\n          <tr id=\"addr0\" key={idx}>\n            {this.renderInputRow(idx)}\n            <td className=\"text-center\">\n              <button\n                className=\"btn btn-outline-danger btn-sm font-weight-bold\"\n                onClick={this.handleRemoveSpecificRow(idx)}\n              >\n                X\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    );\n  };\n\n  render() {\n    if (this.state.errors.length >= 1) {\n      return (\n        <React.Fragment>\n          {this.state.errors.map(error => {\n            return <span>{error}</span>;\n          })}\n        </React.Fragment>\n      );\n    }\n    return (\n      <div className=\"container col-8 float-center mt-4\">\n        <span className=\"h3 m-3 text-capitalize\">{this.props.tableName}</span>\n        <div class=\"table-wrap pr-2 mb-2\">\n          <table\n            className=\"table table-bordered table-striped table-hover m-2\"\n            id=\"tab_logic\"\n          >\n            <thead>\n              <tr>\n                {this.state.attributes.map(attribute => (\n                  <th className=\"text-center text-capitalize\">{attribute}</th>\n                ))}\n                <th />\n              </tr>\n            </thead>\n            {this.renderInputRows()}\n            {/* //rendering table body */}\n          </table>\n        </div>\n        <div className=\"float-left\">\n          <button\n            onClick={this.handleAddRow}\n            className=\"btn btn-outline-primary m-2\"\n          >\n            Add\n          </button>\n          <button\n            onClick={this.handleRemoveRow}\n            className=\"btn btn-outline-danger m-2\"\n          >\n            Remove\n          </button>\n        </div>\n\n        <button\n          onClick={this.handleSubmit}\n          className=\"btn btn-outline-success m-2 float-right font-weight-bold\"\n        >\n          Save\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default AddDataContainer;\n","import React, { Component } from \"react\";\nimport AddDataContainer from \"./AddDataContainer\";\n\nclass AddDataApp extends Component {\n  state = {\n    tableName: this.props.tableName\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    state.tableName = props.tableName;\n    return state;\n  }\n\n  render() {\n    return (\n      <AddDataContainer\n        tableName={this.state.tableName}\n        parentSetClickedApp={this.props.parentSetClickedApp}\n      />\n    );\n  }\n}\n\nexport default AddDataApp;\n","import React, { Component } from \"react\";\n\nclass TableNameContainer extends Component {\n  state = {\n    tableNames: [], //hardcoded\n    activeTableName: \"\",\n    lastCreatedTable: this.props.lastCreatedTable,\n    errors: []\n  };\n\n  getTableNamesURL = \"https://data-exchange-api.herokuapp.com/api/table/names\";\n\n  async componentDidMount() {\n    //fetch names of all tables from API\n    this.fetchAndUpdateTableNames();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.lastCreatedTable !== prevProps.lastCreatedTable) {\n      console.log(\n        \"props compare on update: \",\n        this.props.lastCreatedTable,\n        prevProps.lastCreatedTable\n      );\n      this.fetchAndUpdateTableNames();\n    }\n  }\n\n  isValidResponse(response) {\n    const errorRegexp = /failureMySql/;\n    const responseArray = [...response]; //CLEAN THIS SHIT UP\n    console.log(\"DEBIL\");\n    console.log(responseArray);\n    console.log(Object.keys(responseArray).length);\n    console.log(responseArray[0]);\n    console.log(errorRegexp.test(responseArray[0]));\n    if (Object.keys(responseArray).length !== 1) return true;\n    if (errorRegexp.test(responseArray[0])) {\n      return false;\n    }\n    return true;\n  }\n\n  fetchAndUpdateTableNames() {\n    const options = {\n      method: \"GET\"\n    };\n    fetch(this.getTableNamesURL, options)\n      .then(response => response.json())\n      .then(receivedTableNames => {\n        if (this.isValidResponse(receivedTableNames)) {\n          this.setState({ tableNames: receivedTableNames });\n        } else {\n          console.log(\"Error\", receivedTableNames);\n          const stateErrors = this.state.errors;\n          this.setState({ errors: [...stateErrors, receivedTableNames] });\n          this.setState({ tableNames: [] });\n        }\n      });\n  }\n\n  renderTableContent = () => {\n    return this.state.tableNames.map(table => (\n      <tr className=\"clickable-row\">\n        <td className=\"text-center\">\n          <button\n            className=\"button btn-block btn-outline-secondary btn-lg m-1 text-capitalize text-wrap\"\n            onClick={() => {\n              this.setState({ activeTableName: table });\n              this.props.parentSetClickedApp(\"ViewDataApp\");\n              this.props.parentGetClickedTable(table);\n              //pass flag to refresh ViewDataApp???\n            }}\n          >\n            {table}\n          </button>\n        </td>\n      </tr>\n    ));\n  };\n\n  render() {\n    if (this.state.errors.length >= 1) {\n      return (\n        <React.Fragment>\n          {this.state.errors.map(error => {\n            return <span>{error}</span>;\n          })}\n        </React.Fragment>\n      );\n    }\n    console.log(\"name container: \", this.state.activeTableName);\n    return (\n      <div className=\"container col-2 float-left ml-2\">\n        <table className=\"\">\n          <thead>\n            {/* <tr>\n              <td className=\"text-center\">\n                <h3>Tables</h3>\n              </td>\n            </tr> */}\n          </thead>\n          <tbody>\n            {this.renderTableContent()}\n            <tr>\n              <td>\n                <button\n                  className=\"button btn-block btn-outline-success btn-lg m-1\"\n                  onClick={() =>\n                    this.props.parentSetClickedApp(\"CreateTableApp\")\n                  }\n                >\n                  Add Table\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default TableNameContainer;\n","import React, { Component } from \"react\";\n\nimport CreateTableApp from \"./components/CreateTableApp/CreateTableApp\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport ViewDataApp from \"./components/ViewDataApp/ViewDataApp\";\nimport AddDataApp from \"./components/AddDataApp/AddDataApp\";\nimport TableNameContainer from \"./components/TableNameContainer\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    currentTableName: undefined,\n    currentApp: \"ViewDataApp\",\n    lastCreatedTable: undefined\n  };\n\n  parentSetLastCreatedTable = tableName => {\n    this.setState({ lastCreatedTable: tableName });\n  };\n\n  parentSetClickedTable = tableName => {\n    this.setState({ currentTableName: tableName });\n  };\n\n  parentSetClickedApp = clickedApp => {\n    this.setState({ currentApp: clickedApp });\n  };\n\n  renderApp = () => {\n    const currentApp = this.state.currentApp;\n    const currentTable = this.state.currentTableName;\n    if (currentApp == \"AddDataApp\" && currentTable != undefined) {\n      return (\n        <AddDataApp\n          tableName={this.state.currentTableName}\n          d\n          parentSetClickedApp={this.parentSetClickedApp}\n        />\n      );\n    }\n    if (currentApp == \"ViewDataApp\" && currentTable != undefined) {\n      return (\n        <ViewDataApp\n          tableName={this.state.currentTableName}\n          parentSetClickedApp={this.parentSetClickedApp}\n        />\n      );\n    }\n    if (currentApp == \"CreateTableApp\") {\n      return (\n        <CreateTableApp\n          parentSetClickedApp={this.parentSetClickedApp}\n          parentSetClickedTable={this.parentSetClickedTable}\n          parentSetLastCreatedTable={this.parentSetLastCreatedTable}\n        />\n      );\n    }\n\n    console.log(\"Unknown App or Undefined: \", this.state.currentApp);\n    return (\n      <div id=\"page-content\">\n        <div className=\"container text-center\">\n          <div className=\"row justify-content-center\">\n            <div className=\"col-md-7\">\n              <h1 className=\"font-weight-light mt-4 text-black\">\n                Welcome to DataExchange\n              </h1>\n              <p className=\"lead text-black-50\">\n                On the left side you can see all your tables and a button for\n                creating a new one!\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <TableNameContainer\n          parentGetClickedTable={this.parentSetClickedTable}\n          parentSetClickedApp={this.parentSetClickedApp}\n          lastCreatedTable={this.state.lastCreatedTable}\n        />\n        {this.renderApp()}\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}